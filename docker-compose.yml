version: "3.9"
services:
  # Postgres database
  db:
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    image: postgres:14
    user: postgres
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=postgres
    volumes:
      - ./.volumes/database:/var/lib/postgresql/data

  # Frontend and backend
  website:
    build:
      context: .
      dockerfile: ./website/Dockerfile
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DB_URL=db:5432/postgres
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD}
      - MICROSOFT_CLIENT_ID=${MICROSOFT_CLIENT_ID}
      - MICROSOFT_TENANT_ID=${MICROSOFT_TENANT_ID}
      - REDIRECT_URI=http://localhost:3000/api/login

      - PFP_S3_BUCKET=${PFP_S3_BUCKET}
      - BOT_S3_BUCKET=${BOT_S3_BUCKET}
      - BOT_SIZE=5000000
      - APP_PFP_ENDPOINT=https://pokerbots-pfp.s3.us-east-1.amazonaws.com

      - AZURE_SECRET=${AZURE_SECRET}
      - SECRET_KEY=${SECRET_KEY}

      - BOT_UPLOADS_QUEUE_URL=http://sqs:9324/queue/bot_uploads
      - NEW_GAMES_QUEUE_URL=http://sqs:9324/queue/new_games

      - RUST_LOG=info

      - APP_PFP_ENDPOINT=https://loremflickr.com/128/128?lock=
      - S3_ADDRESS=http://${S3_ACCESS_KEY}:${S3_SECRET_KEY}@s3:9000
  gameplay:
    build:
      context: .
      dockerfile: ./workers/gameplay/Dockerfile
    restart: always
    environment:
      - RUST_LOG=info
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}

      - NEW_GAMES_QUEUE_URL=http://sqs:9324/queue/new_games
      - GAME_RESULTS_QUEUE_URL=http://sqs:9324/queue/game_results

      - S3_ADDRESS=http://${S3_ACCESS_KEY}:${S3_SECRET_KEY}@s3:9000
      - SQS_ADDRESS=http://sqs:9324
  builder:
    build:
      context: .
      dockerfile: ./workers/builder/Dockerfile
    restart: always
    environment:
      - RUST_LOG=info
      - COMPILED_BOT_S3_BUCKET=${COMPILED_BOT_S3_BUCKET}
      - BOT_S3_BUCKET=${BOT_S3_BUCKET}

      - BOT_UPLOADS_QUEUE_URL=http://sqs:9324/queue/bot_uploads
      - BUILD_RESULTS_QUEUE_URL=http://sqs:9324/queue/build_results

      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_ADDRESS=http://${S3_ACCESS_KEY}:${S3_SECRET_KEY}@s3:9000
      - SQS_ADDRESS=http://sqs:9324
  results:
    build:
      context: .
      dockerfile: ./workers/results/Dockerfile
    depends_on:
      db:
        condition: service_healthy
    environment:
      - BUILD_RESULTS_QUEUE_URL=http://sqs:9324/queue/build_results
      - GAME_RESULTS_QUEUE_URL=http://sqs:9324/queue/game_results

      - DB_URL=db:5432/postgres
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD}

      - RUST_LOG=info
      - S3_ADDRESS=http://${S3_ACCESS_KEY}:${S3_SECRET_KEY}@s3:9000
  s3:
    image: minio/minio
    ports:
      - 9000:9000
      - 9999:9999
    volumes:
      - ./.volumes/minio:/data
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY}
    command: server /data --console-address :9999
  
  createbuckets:
    image: minio/mc
    depends_on:
      - s3
    environment:
      MINIO_ACCESS_KEY: ${S3_ACCESS_KEY}
      MINIO_SECRET_KEY: ${S3_SECRET_KEY}
      PFP_S3_BUCKET: ${PFP_S3_BUCKET}
      BOT_S3_BUCKET: ${BOT_S3_BUCKET}
      COMPILED_BOT_S3_BUCKET: ${COMPILED_BOT_S3_BUCKET}
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://s3:9000 $S3_ACCESS_KEY $S3_SECRET_KEY;
      /usr/bin/mc mb myminio/$PFP_S3_BUCKET;
      /usr/bin/mc mb myminio/$BOT_S3_BUCKET;
      /usr/bin/mc mb myminio/$COMPILED_BOT_S3_BUCKET;
      exit 0;
      "

  sqs:
    image: softwaremill/elasticmq
    ports:
      - 9324:9324
      - 9325:9325
    volumes:
      - ./elasticmq.conf:/opt/elasticmq.conf:ro

  # nginx reverse proxy and load balancer
  nginx:
    image: nginx:latest
    depends_on:
      - website
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 3000:3000
